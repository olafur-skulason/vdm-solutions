class Location is subclass of Global
types 

instance variables

private location_id : Location_ID; -- Identification
private distance: nat1; -- How far from the entry point is this location 
-- Accepting pieces in empty and filling.
-- Waiting last piece, means the last piece has been committed, but not routed.
-- Full means the last piece has been routed.
private state: <empty> | <filling> | <waiting_last_piece> | <full> := <empty>;
-- The state of the gate, either open or closed.
private gate : Gate := <closed>;

-- Pieces that will be routed to this location.
private committed_pieces : set of Piece := {};
-- Pieces that have already been routed to this location.
private routed_pieces : set of Piece := {};

values

-- Constants used for timing in tracker
private gate_length : nat1 = 30; -- How long is the gate in distance
private drop_time : nat1 = 5; -- How many time does it take for a piece to fall into the location.

operations

public Location: Location_ID * nat1 ==> Location
Location(id, dist) == (
	location_id := id;
	distance := dist
	);

-- Commit piece to location, location is now expecting the piece to be routed.
public commit_piece: Piece * bool ==> ()
commit_piece(piece, last) == (
	committed_pieces := committed_pieces union {piece};
	if last then
		state := <waiting_last_piece>
	else
		state := <filling>
)
pre {piece} inter committed_pieces = {} and -- Piece has not been committed here.
		{piece} inter routed_pieces = {} and -- Piece has not been routed here.
		(state = <empty> or state = <filling>); -- The location is accepting pieces.
	
-- Route committed piece to location. If it is the last piece of the batch, then 
public route_piece: Piece ==> ()
route_piece(piece) == (
	routed_pieces := routed_pieces union {piece};
	committed_pieces := committed_pieces \ {piece};
	if state = <waiting_last_piece> and card committed_pieces = 0 then
		state := <full>
)
pre exists cp in set committed_pieces & cp.piece_id = piece.piece_id and -- Piece must have been committed before being routed.
		not exists rp in set routed_pieces & rp.piece_id = piece.piece_id and -- Piece can only be routed once.
		(state = <filling> or state = <waiting_last_piece>) -- Location must be in a state to accept routing pieces.
post not exists cp in set committed_pieces & cp.piece_id = piece.piece_id and -- 
		exists rp in set routed_pieces & rp.piece_id = piece.piece_id;

-- Open the gate.
public open_gate: () ==> ()
open_gate() == gate := <open>
pre gate = <closed>; -- The gate must be closed before it can be opened.

-- Close the gate.
public close_gate: () ==> ()
close_gate() == gate := <closed>
pre gate = <open>; -- The gate must be open before it can be closed.

-- Sign a batch, this moves it towards a state of removing a batch.
public sign_batch: () ==> ()
sign_batch() == (
	cases state:
	<empty> -> skip, -- We are not producing anything. Do nothing.
	<filling> -> ( -- go to full or waiting_last_piece
		if card committed_pieces <> 0 then state := <waiting_last_piece>
		else state := <full>;
	),
	<waiting_last_piece> -> skip, -- we are waiting for the last piece to be routed. Do nothing.
	<full> -> atomic (
		state := <empty>;
		committed_pieces := {};
	)
	end 
);

-- Is the location in a state to receive new pieces. It will only accept pieces IFF it is either empty or filling.
public pure is_available: nat ==> bool
is_available(-) == ( -- time
	return state = <empty> or state = <filling>;
);

public pure get_id: () ==> Location_ID
get_id() == return location_id;
	
public pure get_distance: () ==> nat1
get_distance() == return distance;

public pure get_gate: () ==> Gate
get_gate() == return gate;

functions

public get_gate_length: () +> nat1
get_gate_length() == gate_length;

public get_drop_time: () +> nat1
get_drop_time() == drop_time;


end Location
