class Environment
types

lineType = <piece> | <order> | <batch>;
inline_piece = nat * token * real * real;
inline_order = nat * nat * Global`Algorithm * nat * set of Global`Location_ID * map seq of char to real * map seq of char to real * nat; 
inline_batch = nat * token;

outline = Global`Event;

instance variables

inline_pieces : seq of inline_piece := [];
inline_orders : seq of inline_order := [];
inline_batches : seq of inline_batch := [];
outlines : seq of outline := [];

grader : Grader;
tracker : Tracker;
static environment : [Environment] := nil;

values

location_initializer : set of Location = {new Location(mk_token(1), 10), new Location(mk_token(2), 10), new Location(mk_token(3), 40), new Location(mk_token(4), 40), new Location(mk_token(5), 80), new Location(mk_token(6), 80)};

-- Trace values

-- End trace values

public io : IO = new IO();

operations

public Environment: seq of char * seq of char ==> Environment
Environment(file_name_piece, file_name_order) == (
	grader := new Grader();
	tracker := new Tracker(location_initializer, grader);
	grader.set_tracker(tracker);
	def mk_(-,p) = io.freadval[seq of inline_piece](file_name_piece) in
		inline_pieces := p;
	def mk_(-,o) = io.freadval[seq of inline_order](file_name_order) in
		inline_orders := o;
	environment := self;
);

public run: () ==> ()
run() ==
(
	dcl result : seq of Global`Event := [];
	while not is_finished()
	do (
		World`time.step_time();
		create_signal(); -- Create inputs for this time.
		result := result ^ tracker.step_time(); -- Tracker step
	);
	print_result(result)
);

private print_result: seq of Global`Event ==> ()
print_result(events) == (
	if events = [] then return
	else (
		dcl e : Global`Event := hd events;
		io.print(e.time);
		io.print(" ");
		io.print(e.event_type);
		io.print(" ");
		io.print(e.piece.piece_id);
		io.print(" ");
		io.print(e.piece.destination);
		io.print("\n");
		print_result(tl events);
	)
);

private complete_signal: Global`Location_ID * nat1 ==> ()
complete_signal(id, time) == inline_batches := inline_batches ^ [mk_(time, id)];

private create_signal: () ==> ()
create_signal() == (
	dcl done : bool := false;
	while not done do
	(
		done := true;
		if len inline_pieces > 0 then
			def mk_(p_time, p_id, p_weight, p_length) = hd inline_pieces in
				if p_time < World`time.get_time() then (
						tracker.add_piece(mk_Global`Piece(p_id, p_time, p_weight, p_length, 0, nil));
						inline_pieces := tl inline_pieces;
						done := false;
				);
		if len inline_orders > 0 then
			def mk_(o_time, o_priority, o_alg, o_concurrency, o_locs, o_criteria, o_completion, o_count) = hd inline_orders in
				if o_time < World`time.get_time() then (
					grader.add_order(mk_Global`Order(o_priority, o_alg, o_concurrency, o_locs, o_criteria, o_completion, o_count));
					inline_orders := tl inline_orders;
					done := false;
				);
		if len inline_batches > 0 then
			def mk_(b_time, b_id) = hd inline_batches in
				if b_time < World`time.get_time() then (
						tracker.sign_batch((b_id));
						inline_batches := tl inline_batches;
						done := false;
				)
	);
);

private pure is_finished: () ==> bool
is_finished() == return len inline_pieces = 0 and len inline_orders = 0 and len inline_batches = 0 and tracker.is_finished();

end Environment 

