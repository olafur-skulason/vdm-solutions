class Tracker is subclass of Global
types

values

conveyor_length : nat = 1000;
step_distance : nat = 2;

instance variables

locations : set of Location;
inv card locations <> 0;
events : set of Event := {};

operations 

public Tracker: set of Location ==> Tracker
Tracker(loc) == locations := loc;

public add_piece: Piece ==> ()
add_piece(piece) == 
	def t : nat = World`time.get_time() in (
		events := dunion {events, { mk_Event(<grade>, t+1, piece) }, {mk_Event(<off_end>, t+(conveyor_length/step_distance), piece)}};
	);

public add_order: Order ==> ()
add_order(order) == (
	dcl remaining : nat := order.count;
	while (exists l in set locations & l.get_production() = nil and remaining > 0)
	do
		let l in set locations be st l.get_production() = nil in (
			l.set_production(order);
			remaining := remaining - 1
		);
	if remaining > 0 then
		while (exists low_prio_loc in set locations & low_prio_loc.get_production().order.priority < order.priority and remaining > 0)
		do
			let low_prio_loc in set locations be st low_prio_loc.get_production().order.priority < order.priority in (
			sign_batch(low_prio_loc.get_id());
			low_prio_loc.set_production(order); 
			);
	);
	
public sign_batch: Location_ID ==> ()
sign_batch(location_id) == (
	let location in set locations be st location.get_id() = location_id in
	(
		location.sign_batch()
	);
)
pre exists l in set locations & l.get_id() = location_id;


functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Tracker