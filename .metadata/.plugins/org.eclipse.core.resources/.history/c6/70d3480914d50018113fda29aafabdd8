types
image ::
	ID : token
	quality : nat;
	
	--1. Get baggage images from camera
	--2. Sort baggage images in TF
	--3. Get Next un-sorted bag for grading.
	
	
bag ::
	cause : <no_bsm> | <no_read> 
	BG : BaggageRecording
	dest : seq of char;

	
BaggageRecording = set of image; -- A set of images of a bag tag with variant quality.
Preselection = seq of image; -- A sequence of images ordered by highest quality first.

User ::
	Group : set of <VCS_operator> | <VCS_Administrator>
	user_id;

values

max_concurrent_users : nat = 10;
active_users : nat = 0;


functions

Login(user:User) nat
pre card user.Group <> 0 -- User must be authorized
post card (user.Group inter {<VCS_operator>, <VCS_Administrator>}); -- Authorization level dependent on group membership  

GetBaggageRecording() bg:BaggageRecording
post card bg >= 25;

SortImages(bg:BaggageRecording) ps:Preselection
pre card bg > 25
post len ps = 25 and (forall i,j in set inds ps & (i > j) => ps(i).quality >= ps(j).quality);

EvaluateImage(ps:Preselection) dest:seq of char
pre len ps = 25
post len dest > 0 and len dest <= 3;
