class Tracker is subclass of Global
types

values

conveyor_length : nat = 1000;
step_distance : nat = 2;
cut_off_grade : real = 0.5;

instance variables

locations : inmap Location_ID to Location;
inv card dom locations <> 0;
events : set of Event := {};

operations 

public Tracker: set of Location ==> Tracker
Tracker(loc) == locations := { l.get_id() |-> l | l in set loc };

public add_piece: Piece ==> ()
add_piece(piece) == 
	def t : nat = World`time.get_time() in (
		events := events union { mk_Event(<grade>, t+1, piece) , mk_Event(<off_end>, t+(conveyor_length/step_distance), piece)};
	);

public add_order: Order ==> ()
add_order(order) == (
	dcl remaining : nat := order.count;
	while (exists l in set rng locations & l.get_production() = nil and remaining > 0)
	do
		let l in set rng locations be st l.get_production() = nil in (
			l.set_production(order);
			remaining := remaining - 1
		);
	if remaining > 0 then
		while (exists low_prio_loc in set rng locations & low_prio_loc.get_production().order.priority < order.priority and remaining > 0)
		do
			let low_prio_loc in set rng locations be st low_prio_loc.get_production().order.priority < order.priority in (
			sign_batch(low_prio_loc.get_id());
			low_prio_loc.set_production(order); 
			);
	);
	
public step_time: () ==> ()
step_time() == 
	def t : nat = World`time.get_time() in (
		while exists e in set events & e.time < t do
			let event in set events be st forall ev in set events & event <> ev => event.time < ev.time in (
				if event.event_type = <grade> then (
					dcl destination : Location := grade_piece(event.piece);
					dcl piece : Piece := event.piece;
					piece.destination := destination.get_id(); -- Assign destination
					destination.commit_piece(piece); -- Commit piece
					-- Schedule open/close gate events
					events := events union { mk_Event(<open_gate>, t + (destination.get_distance()/step_distance), piece), mk_Event(<close_gate>, t + (destination.get_distance()+destination.get_gate_length())/step_distance, piece) };
					-- Schedule routing event
					events := events union {mk_Event(<route>, t + (destination.get_distance() + destination.get_gate_length()) / step_distance + destination.get_drop_time(), piece)};
					-- Unschedule off-end event
					let off_end_event in set events be st off_end_event.event_type = <off_end> and off_end_event.piece = piece in
						events := events \ {off_end_event}
				)
				else if event.event_type = <route> then (
					locations(event.piece.destination).route_piece(event.piece)
				)
				else if event.event_type = <open_gate> then (
					locations(event.piece.destination).open_gate()
				)
				else if event.event_type = <close_gate> then (
					locations(event.piece.destination).close_gate()
				)
				else if event.event_type = <off_end> then (
					skip -- Write output
				);
				events := events \ {event}
			)
	);
	
private grade_piece: Piece ==> Location
grade_piece(piece) == (
	let destination in set rng locations be st 
			forall loc in set rng locations & (destination.get_order() <> nil) and ( 
				loc.get_order() <> nil => destination.offer_piece(piece) >= loc.offer_piece(piece) and 
														destination.get_order().priority >= loc.get_order().priority) in
				return destination; 
);
	
public sign_batch: Location_ID ==> ()
sign_batch(location_id) == 
	locations(location_id).sign_batch()
pre exists l in set dom locations & locations(l).get_id() = location_id;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Tracker