class System
instance variables

private Purses: map Purse`CardId to Purse;
inv forall x,y in set rng Purses & x <> y => x.GetCardNo() <> y.GetCardNo();
inv SumBalance({x.GetBalance() | x in set rng Purses}) = TotalBalance;

private TransactionHistory : seq of Transaction; 
inv forall x in seq TransactionHistory & x.fromId <> x.toId;
inv forall x in seq TransactionHistory & x.sum > 0;

private TotalBalance: real;
types

public Transaction ::
	fromId : token
	toId : token
	sum : real;

-- no types currently defined
operations
public Transfer: Purse`CardId * Purse`CardId * real ==> ()
Transfer(fromId, toId, sum) == (
		Purses(fromId).DecreaseBal(sum);
		Purses(toId).IncreaseBal(sum);
		TransactionHistory := TransactionHistory ^ [mk_Transaction(fromId,toId,sum)]
	);

public System: set of Purse * real ==> System
System(PurseSet, totalBalance) == (
	Purses := { p.GetCardNo() |-> p | p in set PurseSet};
	TotalBalance := totalBalance;
	TransactionHistory := []
);

public TotalTransferred: () ==> real
TotalTransferred() == SumBalance({x.sum | x in seq TransactionHistory});

functions
-- no functions currently defined

private SumBalance: set of real -> real
SumBalance(numbers) == 
	if numbers = {}
	then 0
	else
		let p in set numbers
		in
			p + SumBalance(numbers\{p})
measure card numbers;

end System
