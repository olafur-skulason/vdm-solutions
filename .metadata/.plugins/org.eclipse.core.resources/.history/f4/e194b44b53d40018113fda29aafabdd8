class Tests
types
-- TODO Define types here
values

tracePeriodicTrue  = [ <A>, nil, nil, nil, <V>, <A>, nil, nil, nil, <V> ];
tracePeriodicFalse = [ <A>, <V>, nil, <A>, <V>, <A>, <A>, <V>, nil, <V> ];

-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations

public RunAllTests: () ==> ()
RunAllTests() == (
		IO`print("Run periodic, true: ");
		IO`print(Heart`Periodic(tracePeriodicTrue, <A>, 5));
		IO`print("\n");
		IO`print("Run periodic, false: ");
		IO`print(Heart`Periodic(tracePeriodicFalse, <A>, 5));
		IO`print("\n");
		
		IO`print("Run periodic on Ideal, truetrue: ");
		IO`print(Heart`Periodic(new Heart(5,3).Ideal(), <A>, 5));
		IO`print(Heart`Periodic(new Heart(5,3).Ideal(), <V>, 5));
		IO`print("\n");
		
		IO`print("Run periodic on Faulty, truefalse: ");
		IO`print(Heart`Periodic(Faulty(new Heart(5,3).Ideal()), <A>, 5));
		IO`print(Heart`Periodic(Faulty(new Heart(5,3).Ideal()), <V>, 5));
		IO`print("\n");
		
	);
	
public Faulty(t: Global`Trace) newTrace: Global`Trace
post newTrace = t ++ { 4 |-> <V>, 8 |-> <V>, 8 |-> <V>, 12 |-> <V>, 16 |-> <V>, 20 |-> <V>, 24 |-> <V>, 32 |-> <V> }


-- TODO Define operations here
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Tests