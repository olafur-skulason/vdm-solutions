class Solution
types
public SS = set of set of nat
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
private item : nat := 0
operations

public test: () ==> ()
test() == (
	IO`print(SumSS({}) = 0);
	IO`print(SumSS({{1}}) = 1);
	IO`print(SumSS({{1},{2}}) = 3);
	
	IO`print("\n");
	IO`print(IsPartition({{1},{2}}, {1}));
	IO`print(IsPartition({{1},{2}}, {3}));
	IO`print(IsPartition({{1},{2},{1}}, {1}));
	
);

functions

public pairwiseDisjoint: SS -> bool
pairwiseDisjoint(ss) == dinter(ss) = {};

public Elements: SS -> set of nat
Elements(ss) == dunion(ss);

public IsPartition: SS * set of nat -> bool
IsPartition(ss, part) == exists1 s in set ss & (part = s);

private sum: set of nat -> nat
sum(s) == 
	if s = {} then 0
	else let x in set s in x + sum(s\{x})
measure card(s);

public SumSS: SS -> nat
SumSS(ss) == sum(Elements(ss));

traces
-- TODO Define Combinatorial Test Traces here
end Solution