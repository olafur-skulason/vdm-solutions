class Heart
types
-- TODO Define types here
values
-- TODO Define values here
instance variables

period: nat;
v_delay: nat;

-- TODO Define instance variables here
operations

public Heart: nat * nat ==> Heart
Heart(p, v_d) == (
	period := p;
	v_delay := v_d;
);

public Ideal: () ==> Global`Trace
Ideal() == (
	build_ideal(0, 0, 100);
);

private build_ideal: nat * nat * nat ==> Global`Trace
build_ideal(to_next_A, to_next_V, remaining) ==
	if remaining = 0 then return []
	else if to_next_A = 0 then return [<A>] ^ build_ideal(period, v_delay, remaining-1)
	else if to_next_V = 0 then return [<V>] ^ build_ideal(to_next_A-1, to_next_V-1, remaining-1)
	else return [nil] ^  build_ideal(to_next_A-1, to_next_V-1, remaining-1);

-- TODO Define operations here
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Heart