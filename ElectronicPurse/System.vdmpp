class System
instance variables
private Purses: map Purse`CardId to Purse;
inv forall x,y in set rng Purses & x <> y => x.GetCardNo() <> y.GetCardNo();
inv SumBalance(rng Purses) = TotalBalance;

private TotalBalance: nat1;
types
-- no types currently defined
operations
public Transfer: Purse`CardId * Purse`CardId * nat ==> ()
Transfer(fromId, toId, sum) == (
		Purses(fromId).DecreaseBal(sum);
		Purses(toId).IncreaseBal(sum);
	);

public System: set of Purse * nat1 ==> System
System(PurseSet, totalBalance) == (
	Purses := { p.GetCardNo() |-> p | p in set PurseSet};
	TotalBalance := totalBalance
);
functions
-- no functions currently defined

private SumBalance: set of Purse -> nat
SumBalance(purses) == 
	if purses = {}
	then 0
	else
		let p in set purses
		in
			p.GetBalance() + SumBalance(purses\{p})
measure card purses;

end System